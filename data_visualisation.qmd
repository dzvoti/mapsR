# Data Visualisation

## Plots and Graphs

The objective of this section is to provide information on the topic under consideration, along with examples and exercises. You should be able to work through it in R studio. This section requires some packages to be loaded.

## Loading libraries

```{r eval=TRUE}

library(ggplot2) # data visualisation
library(dplyr) # data manipulation

```

## Loading the data

To demostrate the visuals, let us load a dataframe called `'data_temp'` that has three columns `soil_temp`, `soil_moisture` and `site`.

```{r eval=TRUE}

data_temp <- read.csv(here::here("data", "soil-test.csv"))

```


The **specific objective** of the material in this script is to introduce you to different graphic used in R. By the end you should have a better understanding of some basic concepts regarding data visualisation, and should be better-placed to start developing and editing scripts yourself. The particular topics we shall cover are:

1)  Univariate graphs
2)  Multivariate graphs
3)  Controlling layout
4)  Printing graphs

## Univariate graphs

In this section, we look at graphics that we may create with a single variable. This includes histograms, boxplots, bar charts, as well as `QQ plots`. These are usually important in checking the distribution of variables in your dataset or checking the residuals of a fitted model.

### Histogram


```{r eval=TRUE}

# Generating the base for the plot

data_temp %>% 
  ggplot()

# Creating the histogram

data_temp %>% 
  ggplot() +
  geom_histogram(aes(soil_moisture))

```

#### Changing colour of a histogram

::: {.callout-warning collapse="true"}

## Colour names (click to expand)

This is done by adding argument `fill ="color"`. There are various options of colors that can be used. You can check the various options of colors you can use by typing `colors()`.

```{r eval=TRUE}
colors()
```
:::

The color name is placed in quotation marks. Let us make our histogram dark blue.


```{r eval=TRUE}

# Changing  colour of the histogram
data_temp %>% 
  ggplot() +
  geom_histogram(aes(soil_moisture), fill = "darkblue")

```


This produces a histogram with blue bars, an x-axis labelled `"moisture"` and the title `"histogram of moisture"`. All these three can be changed to your preference by adding extra arguments to the `ggplot()` function.

Changing name of `x-axis`: This is done by adding argument `xlab("name of axis")`. Note that the name of axis is in quotation marks. Lets assume these data is moisture data.


```{r eval=TRUE}

data_temp %>% 
  ggplot() +
  geom_histogram(aes(soil_moisture), fill = "darkblue") + 
  xlab("moisture (g)") 

```

::: callout-tip
Note the `"solidus"` or `/` inbetween the name of the variable (Temperature) and the units. This is good practice for presenting units in axis labels, favoured by many publishers. The quantities on some axis labels have dimensions which are ratios, like kg per ha. This can be done `"kg/ha"` but that is not good scientific practice, particularly if you are using the solidus to indicate units as above. It is better to follow the `"ha"` with a power `"-1"`. In R we can do this as follows (of course your data won't be realistic for this example!)
:::

```{r eval=TRUE}

data_temp %>% 
  ggplot() +
  geom_histogram(aes(soil_moisture), fill = "darkblue") + 
  xlab(expression("kg ha"^-1))

```

#### Changing main title

This is done by adding argument `ggtitle("name of main title")`. Note that the name of axis is in quotation marks. Lets assume these data is soil moisture data.

```{r eval=TRUE}

data_temp %>% 
  ggplot() +
  geom_histogram(aes(soil_moisture), fill = "darkblue") + 
  xlab(expression("kg ha"^-1))  +
  ggtitle("histogram of soil moisture") 

```

You can also change other features like the contour of the bins or the width. 

```{r eval=TRUE}

# Changing bin width of the histogram
data_temp %>% 
  ggplot() +
  geom_histogram(aes(soil_moisture), binwidth = 0.5) + 
  xlab(expression("kg ha"^-1))  +
  ggtitle("histogram of soil moisture") 

# Changing outline colour of the histogram
data_temp %>% 
  ggplot() +
  geom_histogram(aes(soil_moisture), colour = "green") + 
  xlab(expression("kg ha"^-1))  +
  ggtitle("histogram of soil moisture") 

```

::: callout-note
## Exercise

i) generate a red histogram. Label the histogram appropriately, assuming that these are data for `Maize yield in kilograms per hectare` for Chitedze experimental station.

:::


### QQ plots

The second type of plot we can look at is the `qqplot`. This plot is used to check normality of data. The argument used is `stat_qq()`, and it needs to specify the `sample=variable`.

```{r eval=TRUE}

#Starting with the empty plot
data_temp %>% 
  ggplot() 

#QQ plot
data_temp %>% 
  ggplot() +
  stat_qq(aes(sample = soil_moisture))

```

The argument for this function is the soil moisture data. The sample quantiles are just the data values, plotted in increasing order. The theoretical quantiles are the corresponding values for an ordered set of the same number of variables with the standard normal distribution (mean zero variance 1). This means that, if the data are normal, the `qq plot` should lie on a straight line. The `stat_qq_line` command adds this line to the plot to help your interpretation.

```{r eval=TRUE}

#QQ plot + QQ line
data_temp %>% 
  ggplot() +
  stat_qq(aes(sample = soil_moisture)) +
  stat_qq_line(aes(sample = soil_moisture))

```

You can add a plot title using `"ggtitle = ""` as in "histogram and you can change the `qqline` color if you so wish by adding the `col=""` argument.

```{r eval=TRUE}

#QQ plot + QQ line
data_temp %>% 
  ggplot() +
  stat_qq(aes(sample = soil_moisture)) +
  stat_qq_line(aes(sample = soil_moisture), colour = "red") +
  ggtitle("Soil moisture QQ-plot")

```

::: callout-note
## Exercise: qq plot

i) generate a `qq plot` with a 1:1 line.
ii) Label it appropriately assuming that these are data for Maize yield in kilograms per hectare for Chitedze experimental station.
:::

### Box plot

Box plots give summary of the minimum, first quartile, median, third quartile inter quartile range, maximum and outlier values in your dataset. They are used for univariate data but can be split based on a factorial variable e.g gender. The function that is used to call for a boxplot is `geom_boxplot()` and the argument is vector data. let us try ploting using the data we generated earlier.

```{r eval=TRUE}
boxplot(data_temp$soil_moisture)
```

```{r eval=TRUE}

#Starting with the empty plot
data_temp %>% 
  ggplot() 

#Boxplot
data_temp %>% 
  ggplot() +
  geom_boxplot(aes(soil_moisture))

#Boxplot - changing the orientation
data_temp %>% 
  ggplot() +
  geom_boxplot(aes(soil_moisture)) +
  coord_flip() 


```

You can choose to label your box plot with main title, color and label the axis similar to what we did for histograms. This time however, we label y-axis using ylab argument.

```{r eval=TRUE}

#Boxplot - changing the orientation

data_temp %>% 
  ggplot() +
  geom_boxplot(aes(soil_moisture), colour = "dark blue") +
  coord_flip() +
  xlab("moisture (g)") +
  ggtitle("boxplot of soil moisture") 

```

The thick black line in the centre of the boxplot corresponds to the median value of the data (half the values are smaller, half are larger). The bottom of the box (the blue shaded area) is the first quartile of the data, Q1 (25% of the values are smaller), and the top of the box is the third quartile of the data, Q3 (25% of the values are larger).

In exploratory data analysis we call the quantity H = Q3-Q1 the "h-spread". R calculates what are known as "inner fences" of the data which are at `Q1-1.5*H` and `Q3+1.5*H` The "whiskers" above and below the box join the Q1 to the smallest data value inside the inner fences, and Q3 to the largest value inside the inner fences. If there are values outside the inner fences then these appear as points on the plot.

It is possible to produce a graph in which separate boxplots are produced for different levels of a factor. As an example, let's assume that some values in data come from soil collected at Liempe, other are from Domboshava, and others in Chitedze. The values are stored in the variable called`"site"`.

We then want to plot our data split by the corresponding site we have sampled. We use the function `geom_boxplot()` but this time we add a new variable.

```{r eval=TRUE}

#Boxplot - by site
  data_temp %>% ggplot() +
  geom_boxplot(aes(soil_moisture, site))

#Boxplot - by site
data_temp %>% 
  ggplot() +
  geom_boxplot(aes(soil_moisture, site), colour = "dark blue") +
  coord_flip() +
  xlab("moisture (g)") +
  ggtitle("boxplot of soil moisture") 


```


::: callout-note
## Exercise: Box plot

Using the data create:

i)  three boxplots one for all the site data combined and
ii) another plot that seperates the sites boxplots.
iii) label the boxplots appropriately.
iv) are there any outliers in your data?
:::

### Bar plot

This allows us to create a bar chart where the heights of the bars are based on the values given by the vector input. The argument that is used to call for a barplot is `geom_bar()` and the argument is our site data. There are additional options for giving names to each of the bars, for instance, and for coloring the bars, as you have seen for other earlier plots. This function usually works well when you have tabular data. The simplest form for the function `geom_bar()` is given below.

```{r eval=TRUE}

#Bar plot
  data_temp %>% ggplot() +
  geom_bar(aes(site))

# Checking the results of the barplot
table(site)

```

You can check the results by using the function `table()`, which provide you a count per each variable. 

Also, you can choose to add labels to barplot as earlier mentioned for the previous plots. You can as well change the color of the bars.

```{r eval=TRUE}

 data_temp %>% ggplot() +
  geom_bar(aes(site)) +
  xlab("Sites") +
  ylab("count") +
  ggtitle("Number of samples per site") 

```

You can also change the axis, by using the `ylim()` function

```{r eval=TRUE}

# Changing limits and colour
 data_temp %>% ggplot() +
  geom_bar(aes(site),  fill = "light blue") +
  ylim(0,45)+
  xlab("Sites") +
  ylab("count") +
  ggtitle("Number of samples per site") 

 
```

You can also change the colour by each site, that will provide a distinct colour for each site. 

```{r eval=TRUE}

# Changing limits and colour by site

 data_temp %>% ggplot() +
  geom_bar(aes(site, fill = site)) +
  ylim(0,45)+
  xlab("Sites") +
  ylab("count") +
  ggtitle("Number of samples per site") 

 
```

::: callout-note
## Exercise: Bar plot

i)  Create a bar plot to show the frequency of the three soil types in the sample,
ii) label it and adjust the axis and colour appropriately.
:::

## Multivariate graphs

In this section, we look at graphics that we may create with multiple variables. They are important in checking how two or more variables relate to each other.

### Plots

The simplest scatter plot is done using the `geom_point()` function which takes in two arguments. The first argument represents the `x-axis` while the second argument is the vector of `y-axis`. 

```{r}

# The data points per site (x, y)
data_temp %>% 
  ggplot() +
  geom_point(aes(site, soil_temp)) 

```


From the scatter plot, you will notice that, by default,it added axis labels that are simply the names of the objects we passed i.e `soil_moisture` and `site` and there is no title. All of these things, can be added as previous graphs.

The list below shows arguments that can be added to the plot function as discussed already:

-   xlab("site")
-   ylab("temp")
-   ggtitle("Temperature variations by different site")

```{r eval=TRUE}

 # The changing the colour of the data points per site (x, y)
data_temp %>% 
  ggplot() +
  geom_point(aes(site, soil_temp), 
             colour = "red") + # Define the colour of the symbols
  xlab("site") + ylab("temp") +
  ggtitle("Temperature variations by different site")

```



### Plot Symbols

In the graphics that we have created so far, we have mostly left the plotting symbol as the default, black, unfilled circle. However, We can change the symbol by using the argument `shape`.

You can change the plotting symbol by asigning a numeric value using = sign. There are two categories of symbols. Those that range from 0 to 20 and from 21 to 25. For the symbols that range from 21 to 25, in addition to being able to set the color, we can also set the fill. The fill of the shapes is actually set with the argument bg, but just like with the argument col, we can assign any color value.

```{r eval=TRUE}

 # Changing the symbol & colour of the data points per site (x, y)
data_temp %>% 
  ggplot() +
  geom_point(aes(site, soil_temp), 
             shape = 17,  # Defining the symbol
             colour = "red") + # Defining the colour
  xlab("site") + ylab("temp") +
  ggtitle("Temperature variations by different site")

```

Let us change the fill color of the symbol by using the `fill` argument. Remember that **only symbol from 21 to 25** allow that that argument.

```{r eval=TRUE}

 # Changing the symbol, the outline colour and the fill colour of the data points per site (x, y)

data_temp %>% 
  ggplot() +
  geom_point(aes(site, soil_temp), shape = 23, # Define the shape
             colour = "red",  # Define outline colour
             fill = "black") + # Define fill colour
  xlab("site") + ylab("temp") +
  ggtitle("Temperature variations by different site")

```

We can also set the size of the symbols. We do this with the argument `size`.  This argument is simply a numeric value indicating how bigger(or smaller) than the usual size we want our points. 

```{r eval=TRUE}

data_temp %>% 
  ggplot() +
  geom_point(aes(site, soil_temp), # Next argument change the symbol (point)
             shape = 23,   # Define the symbol
             colour = "red", # Define the outline colour
             fill = "black",  # Define the fill colour 
             size =1) +      # Define the size
  xlab("site") + ylab("temp") +
  ggtitle("Temperature variations by different site")

```

::: callout-note
## Exercise 3.6

i)  Update plots with different symbols, fill colors and symbol size. You can use any symbol and fill color of your choice.

::: callout-tip
Note: not all symbol types accept changing fill color.
:::
:::

### Plot types

The plot we have created so far are `scatterplots`. We can however, use alternative plot types. These may include line plot, step plot and lines with points among others.

::: callout-note
## Exercise 3.7

Create a plot using the variables `soil_temp` and `soil_moisture`.

:::




::: callout-note
## Exercise 3.8

From your plot in Exercise 3.7 ,Update plots to differentiate the sites using symbol type and color, fill colors and symbol size. You can use any symbol and fill color of your choice.

::: callout-tip
Note: not all symbol types accept changing fill color.
:::
:::




From the dataframe `data_temp`, we can plot the data by the different sites on the same plot using `colour`.

```{r eval=TRUE}

# Scatterplot of soil_moisture & soil_temp by site
data_temp %>% 
  ggplot() +
  geom_point(aes(soil_moisture, soil_temp, 
                 colour=site)) + # Define colour by site
xlab("moisture (g/Kg)") + # Rename x-axis
  ylab("temp (Celsius)") + # Rename y-axis
  # Adding a title
  ggtitle("Variation of the temperature & moisture by different site")

```

You can also change the symbol `shape` by any variable, for instance, site. 

```{r eval=TRUE}

# Plotting soil_moisture & soil temp. by site (colour & shape)
data_temp %>% 
  ggplot() +
  geom_point(aes(soil_moisture, soil_temp, 
                 shape=site, # Defining shape by site
                 colour=site)) +  # Defining colour by site
xlab("moisture (g/Kg)") + # Rename x-axis
  ylab("temp (Celsius)") + # Rename y-axis
  # Adding a title
  ggtitle("Variation of the temperature & moisture by different site")

```

### Adding Legend to plot

Adding a legend to your plot will make your plot easy to translate. From the plot in the previous section, it is not clear what the different colors or shapes represent. A legend provides information for this.The function to use is `theme()` combined with `legend.position()`.

The first argument to this function is the position of the legend on your plot. This can be done either by using `X` and `Y` co-ordinate location or a single string of the form `"bottom"`, `"top"`, `"left"`, `"topleft"` among others.

We then need to specify the legend text using `legend.text` argument. This is a vector of text that will be used to label the legend. The order of the text in the vector should correspond to the order of the points in the plot.

We then specify colors, points, and so on, for data added maintaining the ordering.

Lets create the legend for the plot of `soil moisture` vs `temperature` at the sites `liempe`, `chitedze` and `domboshava`. Note that a plot must already be active for legend to be used.

```{r eval=TRUE}

# Plotting soil_moisture & soil temp. by site (colour & shape)
# Changing the position of the legend
data_temp %>% 
  ggplot() +
  geom_point(aes(soil_moisture, soil_temp, 
                 shape=site, # Defining shape by site
                 colour=site)) +  # Defining colour by site
xlab("moisture (g/Kg)") + # Rename x-axis
  ylab("temp (Celsius)") + # Rename y-axis
  # Adding a title
  ggtitle("Variation of the temperature & moisture by different site")+
   theme(legend.position = "bottom") # Changing the position of the legend

```

One can alternatively use the x,y position on the plot to position the legend

```{r eval=TRUE}

# Plotting soil_moisture & soil temp. by site (colour & shape)
# Specifying the location of the legend
data_temp %>% 
  ggplot() +
  geom_point(aes(soil_moisture, soil_temp, 
                 shape=site, # Defining shape by site
                 colour=site)) +  # Defining colour by site
xlab("moisture (g/Kg)") + # Rename x-axis
  ylab("temp (Celsius)") + # Rename y-axis
  # Adding a title
  ggtitle("Variation of the temperature & moisture by different site")+
  # Specifying the position of the legend
  theme(legend.position = c(.7, .8)) 

```



::: callout-note
## Exercise 3.9

From your previous plot in exercise 3.8, add a legend to the Updated plot that differentiate the species using symbol type and color, fill colors and symbol size.

:::

### Controlling graphical layout

When we create plots, we may want to present them on the same page for easy comparison. This can be done in two ways, firsly, using the `par()` function and secondly, using `layout()` function.

#### Using `par()` function

We can set up a graphics device using the `mfrow` argument in the `par()` function. The argument is a vector of the number of rows and columns into which our device should be split. When we then create graphics, they will be entered into the device across the rows, starting in the top left of the grid.

As an example, suppose that we have some random data that we want to plot as a histogram, boxplot, QQ plot, and against its index. Since we have four plots, We set this up as a 2\*2 grid plot area, using the `par()`.

```{r}
par(mfrow = c(2, 2))
```

This sets up an empty 2\*2 plot area. As you start ploting, the plots will start filling up the plot area. Let us do this by ploting `histogram`, `boxplot`, `QQ plot`, and against its index.

```{r eval=TRUE}
par(mfrow = c(2, 2))

x <- rnorm(100)
hist(x)
boxplot(x)
qqnorm(x)
plot(x)

```

Once you have set up the plotting area, it will remain active untill you set it back to the default by setting mfrow argument to c(1,1).

```{r eval=TRUE}
par(mfrow = c(1, 1))
```

Sometimes when putting graphs together in a panel like this you might find that the individual graphs need adjustments to their format. For example, the `y-axis` labels `"Frequency"` and `"Sample quantiles"` in the example above are perhaps too close to the edge of the panel. The `par` command with argument `"mar"` for margins will adjust this by adjusting the margins for each individual graph to `5 lines (bottom)`, `5 lines (left side)`, `3 lines (top)` and `2 lines (right side)`.

```{r eval=TRUE}
par(mar=c(5,5,3,3))  
```

Try calling this par command after `par(mfrow=c(2,2))`in the example above to see its effect, and experiment with different numbers of lines in the margin. The default setting is c(5, 4, 4, 2) + 0.1 which shows that you can make finer adjustments to the margins than whole numbers of lines.

```{r eval=TRUE}
par(mfrow=c(2,2)) 
par(mar=c(5,5,3,3))

x <- rnorm(100)
hist(x)
boxplot(x)
qqnorm(x)
plot(x)
```

#### Using layout() function

This allows finer control of the layout of our graphics. It allows you to control the width and height of each of the columns in our graphics device. The main argument is a matrix that specifies the locations for each graphic. Each graphic is represented by an integer value and appears in the grid in all regions where that value appears.

As an example, suppose we want to plot four graphics, as in the previous section, but we want the first histogram to take up the entire first row and the other three graphics to appear underneath in one row. In that case, we would create the following matrix

```{r eval=TRUE}
mat <- rbind(1, 2:4)
```

Thus, the first graphic would fill all cells containing the value 1, in this case, the entire first row. The second graphic would appear in the position of the 2, and so on. To set this as our layout, we pass it to the layout() function, followed by the graphics in order. Let us first generate random numbers to work with.

```{r eval=TRUE}
x <- rnorm(100)

layout(mat)

hist(x)
boxplot(x)
qqnorm(x)
plot(x)
```

::: callout-note
## Exercise 3.10

Using the `iris` data, generate

i)  `histogram` of `Sepal Length`,
ii) `boxplot` of `Petal Length`,
iii) `qq plot` of `Petal Width` and
iv) a plot of `Sepal Length` against `Petal Length` on the same plot area with equal dimensions.
:::

::: callout-note
## Exercise 3.11

Adjust, the plot in the previous exercise so that histogram occupies the whole bottom of the plot area and the other three occupy the top of the plot area in equal dimensions.
:::

### Saving/Printing plots

Now that we have known how to create graphics, one thing remaining is to print out the output. A number of graphics devices are available, including **PDF**, **PNG**, **JPEG**, and **bitmap**. If we do not specify the device to use, the default device will be opened, and in R this is the Plot tab.

To print a graph to **pdf** ,**png** and **jpeg**, one must create the device before plotting the graph. This is done by using the functions

```{r eval=FALSE}

pdf("name.pdf")
png("name.pgn")
jpeg("name.jpeg") 

```

The argument for these functions is the desired name of the document in quotation marks e.g. `pdf("myFirstGraphic.pdf")`. When this function is run, the plot tab in R will not appear but a pdf of the graph will be produced in the working directory.

Let us create a histogram of 100 random numbers and save it as a pdf document.

```{r eval=FALSE}
# Create a pdf device
pdf("myFirstGraphic.pdf")

# Create a histogram of 100 random numbers
hist(rnorm(100))

# Close the device
dev.off() 
```

Remember to close the device when done using the `dev.off()` function, otherwise all your graphics onward will be pdf documents and not any other device e.g the R plot tab.

::: callout-note
## Exercise 3.12

Print the plot you generated in EXERCISE to a PDF, PNG and JPEG giving it an appropriate name. Remember to close the device
:::
